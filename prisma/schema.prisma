generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid()) @map("_id")
  name        String
  email       String        @unique
  role        Roles         @default(user)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  quiz        Quiz[]
  score       Int?          @default(0)
  Summissions Summissions[]
}

enum Roles {
  admin
  user
  god
}

// add one to many here

model Quiz {
  id          String        @id @default(cuid()) @map("_id")
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  heading     String?
  description String?
  multimedia  String?
  score       Int @default(0)
  type        quizType
  optionText  optionText?
  optionMCQ   optionMCQ?
  submissions Summissions[]
  createdAt   DateTime      @default(now())
}

enum quizType {
  mcq
  text
}

model optionText {
  id        String   @id @default(cuid()) @map("_id")
  text      String
  quizId    String   @unique
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model optionMCQ {
  id        String   @id @default(cuid()) @map("_id")
  a         String
  b         String
  c         String
  d         String
  mcqId     String   @unique
  quiz      Quiz     @relation(fields: [mcqId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Summissions {
  id        String   @id @default(cuid()) @map("_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  answer    String
  Quiz      Quiz?    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String
  status    Boolean?
  createdAt DateTime @default(now())
}
